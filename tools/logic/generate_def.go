package logic

import (
	"brick/log"
	"fmt"
	"os"
	"strings"
)

func GenerateDef(PD ProtoDetect, rootDir string) error {
	fn := GetTargetFileName(PD, "def", rootDir)

	var cmdList []string
	var path2CmdIDList []string
	var cmdID2PathList []string
	var path2FlagsList []string
	for i := 0; i < len(PD.RpcList); i++ {
		methodName := PD.RpcList[i].MethodName
		cmdID := PD.RpcList[i].CmdID
		path := methodName + "CMDPath"
		url := PD.RpcList[i].Url
		flags := PD.RpcList[i].Flags
		var cmd string

		if url == "" {
			cmd = fmt.Sprintf("\t%s = \"/%s/%s\"", path, PD.PackageName, methodName)
		} else {
			if !strings.HasPrefix(url, "/") {
				url = "/" + url
			}
			cmd = fmt.Sprintf("\t%s = \"%s\"", path, url)
		}
		cmdList = append(cmdList, cmd)

		path2CmdId := fmt.Sprintf("\t%s: %s,", path, cmdID)
		path2CmdIDList = append(path2CmdIDList, path2CmdId)

		cmdID2Path := fmt.Sprintf("\t%s: %s,", cmdID, path)
		cmdID2PathList = append(cmdID2PathList, cmdID2Path)

		path2Flags := fmt.Sprintf("\t%s: %s,", path, flags)
		path2FlagsList = append(path2FlagsList, path2Flags)
	}
	rpcDef := strings.Join(cmdList, "\n")

	var temp = `// Code generated by rpc-gen. DO NOT EDIT.
package %s

const (
	SvrName = "%s"
%s
)

var Path2CmdID = map[string]int{
%s
}

var CmdID2Path = map[int]string{
%s
}

`
	context := fmt.Sprintf(
		temp, PD.PackageName, PD.SvrName, rpcDef,
		strings.Join(path2CmdIDList, "\n"),
		strings.Join(cmdID2PathList, "\n"))

	f, err := os.OpenFile(fn, os.O_CREATE|os.O_TRUNC|os.O_WRONLY, 0644)
	if err != nil {
		log.Fatalf("can not generate file %s,Error :%v", fn, err)
		return err
	}
	if _, err := f.Write([]byte(context)); err != nil {
		return err
	}
	if err := f.Close(); err != nil {
		return err
	}
	return nil
}
